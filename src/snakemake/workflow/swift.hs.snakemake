# vim: syntax=python tabstop=4 expandtab
# coding: utf-8

from os import path

wildcard_constraints:
    unit="[A-Za-z0-9]+",
    sample="[A-Za-z0-9-]+",
    read="[fq12]+",
    part="\d{4}|\d{4}-consensus\d+|\d{4}-consensus\d+\.primerclip\.rg", #part="|[A-Za-z0-9]{4}|\d{4}-consensus\d+"
    consensus="\d{4}-consensus\d+"

singularity: "/projects/wp1/nobackup/ngs/utveckling/software/Pipeline/singularity/swift.simg" #"/projects/wp1/nobackup/ngs/utveckling/workspace/swift/caps.simg"

def _get_split_and_unit_part_files(wildcards, units, config):
    num_splits = config.get("num_fastq_split", 1)
    if num_splits > 1:
        return [ unit + "-%04d" % part for part in range(0,num_splits) for unit in units.loc[wildcards.sample].index]
    else:
        return [ unit + "-0000" for unit in units.loc[wildcards.sample].index]

from pytools.persistent_dict import PersistentDict
storage = PersistentDict("caps_mystorage")

split_fastq_input = lambda wildcards: units.loc[(path.split(wildcards.sample)[-1], wildcards.unit), [wildcards.read]].dropna()[0]
include: "../rules/fastq/split_fastq.smk"

include: "../rules/fastq/headcrop_read.smk"

include: "../rules/umi/extract_umis_read_head.smk"

include: "../rules/fastq/fastqc.smk"

bwa_mem_input = ["fastq/{sample}.{part}.fq1.fastq.gz", "fastq/{sample}.{part}.fq2.headcrop10.fastq.gz"]
include: "../rules/alignment/bwa_mem.smk"

annotate_bam_with_umi_input_umi = "umis/{sample}.{part,[A-Za-z0-9]+-\d{4}}.fq2.UMIs10.fastq"
include: "../rules/umi/annotate_bam_with_umi.smk"

merge_bam_input = lambda wildcards: ["alignment/{}.{}.umiAnnoBam.bam".format(wildcards.sample,unit_part) for unit_part in _get_split_and_unit_part_files(wildcards,units,config)]
merge_bam_output = "alignment/{sample}.0000.bam"
include: "../rules/alignment/merge_bam.smk"

collapse_reads_input="alignment/{sample}.{part}.bam"
collapse_reads_output="alignment/{sample}.{part,\d{4}}-consensus{num_support}.primerclip_input.bam"
include: "../rules/umi/collapse_reads.smk"

primerclip_input="alignment/{sample}.{part}.primerclip_input.bam"
primerclip_output="alignment/{sample}.{part}.primerclip_output.bam"
include: "../rules/trimming/primerclip.smk"

add_replace_read_group_input = "alignment/{sample}.{part}.primerclip_output.bam"
add_replace_read_group_output = "alignment/{sample}.{part}.primerclip.rg.bam"
include: "../rules/alignment/add_replace_read_group.smk"

include: "../rules/alignment/samtool_stats.smk"
include: "../rules/alignment/samtool_flagstats.smk"

gatk3_indelrealignment_input=add_replace_read_group_output
gatk3_indelrealignment_output="alignment/{sample}.{part}.indelrealigned.bam"
include: "../rules/alignment/gatk3_indelrealignment.smk"

mpileup_input=gatk3_indelrealignment_output
include: "../rules/alignment/mpileup.smk"

gatk3_baserecalibrator_input=add_replace_read_group_output
gatk3_baserecalibrator_input_realigned=gatk3_indelrealignment_output
gatk3_baserecalibrator_output="alignment/{sample}.{part}.bsqr.bam"
#include: "../rules/alignment/gatk_baserecalibrator.smk"
include: "../rules/alignment/gatk3_baserecalibrator.smk"

lofreq_input=gatk3_baserecalibrator_output
include: "../rules/callers/lofreq.smk"

annovar_table_output="variants/{sample}.{part}.lofreq.annovar.vcf"
annovar_table_input=_lofreq_output
include: "../rules/annotation/annovar_table.smk"

multiqc_input =  ["qc/fastqc/" + str(unit.Index[0]) + "." + str(unit.Index[1]) + "_fastqc.zip" for unit in units.itertuples()]  + \
                 ["qc/samtool/stats/" + str(unit.Index[0]) + ".0000-consensus3.primerclip.rg.bam.txt" for unit in units.itertuples()] + \
                 ["qc/samtool/flagstats/" + str(unit.Index[0]) + ".0000.bam.flagstats" for unit in units.itertuples()] + \
                 ["qc/samtool/flagstats/" + str(unit.Index[0]) + ".0000-consensus3.primerclip.rg.bam.flagstats" for unit in units.itertuples()]
                 #["qc/samtool/stats/" + str(unit.Index[0]) + ".0000.bam.txt" for unit in units.itertuples()] + \
                 #["logs/umis/" + str(unit.Index[0]) + ".fgbioAnnoBam.txt" for unit in units.itertuples()] + \
include: "../rules/reports/multiqc.smk"
include: "../rules/reports/filter_mutations.smk"
